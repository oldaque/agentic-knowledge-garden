---
name: "LangGraph DeepSearch Example"
objective: "Illustrates the creation of an Agent Graph using LangGraph for advanced research and conversational AI, featuring dynamic query generation, web research, and reflective reasoning."
how_to_run: "This is a conceptual code block demonstrating a LangGraph agent. It requires a full LangGraph and Google Gemini setup, including specific node functions (generate_query, web_research, reflection, finalize_answer) and state definitions (OverallState, Configuration) not provided here."
from_note: "../patterns/reasoning-techniques.md"
---
# Create our Agent Graph builder = StateGraph(OverallState, config_schema=Configuration) # Define the nodes we will cycle between builder.add_node("generate_query", generate_query) builder.add_node("web_research", web_research) builder.add_node("reflection", reflection) builder.add_node("finalize_answer", finalize_answer) # Set the entrypoint as `generate_query` # This means that this node is the first one called builder.add_edge(START, "generate_query") # Add conditional edge to continue with search queries in a parallel branch builder.add_conditional_edges( "generate_query", continue_to_web_research, ["web_research"] ) # Reflect on the web research builder.add_edge("web_research", "reflection") # Evaluate the research builder.add_conditional_edges( "reflection", evaluate_research, ["web_research", "finalize_answer"] ) # Finalize the answer builder.add_edge("finalize_answer", END) graph = builder.compile(name="pro-search-agent")
