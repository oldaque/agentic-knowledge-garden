{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Agentic Knowledge Garden","text":"<p>Agentic Knowledge Garden is a public repository designed to organize and share knowledge about building AI agents, combining research, practice, and curation in one place.</p> <p>It works like a knowledge garden \u2014 a space where ideas start as simple notes, grow with references and experiments, and eventually evolve into guides, patterns, or reusable examples.</p>"},{"location":"#purpose","title":"\ud83c\udf31 Purpose","text":"<p>To gather concepts, patterns, and practices around agentic AI development in an organized, accessible, and evolving way. Every contribution starts small (as a note) and can grow over time as understanding deepens.</p>"},{"location":"#structure","title":"\ud83e\udded Structure","text":"<pre><code>docs/\n\u251c\u2500 README.md\n\u251c\u2500 index.md\n\u251c\u2500 assets/\n\u251c\u2500 guide/      # structured chapters and consolidated knowledge\n\u251c\u2500 patterns/   # recurring design patterns for agent systems\n\u251c\u2500 resources/  # curated references, papers, authors, and links\n\u251c\u2500 snippets/   # small illustrative code or prompt snippets\n\u251c\u2500 examples/   # practical and reproducible examples\n\u2514\u2500 notes/      # starting point for raw notes and discoveries\n</code></pre> <p>Notes \u2192 Decisions \u2192 Promotions Each piece of content begins in <code>notes/</code>. From there, it can be promoted to another section:</p> <ul> <li><code>guide/</code> for structured and educational material</li> <li><code>patterns/</code> for recurring agent design patterns</li> <li><code>resources/</code> for curated references and sources</li> <li><code>snippets/</code> for short, reusable code blocks</li> <li><code>examples/</code> for complete, working demonstrations</li> </ul>"},{"location":"#how-to-navigate","title":"\ud83d\udcda How to Navigate","text":""},{"location":"#notes","title":"\ud83d\udd38 <code>notes/</code>","text":"<p>Raw notes and idea sketches. Use this section to capture insights, references, and exploratory thinking.</p>"},{"location":"#guide","title":"\ud83d\udd38 <code>guide/</code>","text":"<p>Consolidated content explaining topics in a structured or sequential way. Best for continuous reading.</p>"},{"location":"#patterns","title":"\ud83d\udd38 <code>patterns/</code>","text":"<p>A catalog of patterns and architectures for AI agents. Each file defines a problem, the applied pattern, and practical examples.</p>"},{"location":"#resources","title":"\ud83d\udd38 <code>resources/</code>","text":"<p>Curated links, articles, papers, and authors relevant to agentic AI development.</p>"},{"location":"#snippets","title":"\ud83d\udd38 <code>snippets/</code>","text":"<p>Short, ready-to-use code or prompt snippets derived from notes or examples.</p>"},{"location":"#examples","title":"\ud83d\udd38 <code>examples/</code>","text":"<p>Minimal working projects that demonstrate key concepts in practice.</p>"},{"location":"#contributing","title":"\ud83e\udde9 Contributing","text":"<p>You can:</p> <ul> <li>Add new notes to expand the knowledge base</li> <li>Consolidate notes into structured guide chapters</li> <li>Add patterns or references to existing sections</li> <li>Improve, organize, or review existing content</li> </ul> <p>Use Markdown for all files and follow the structure defined in each section\u2019s <code>section_file_schema.yml</code>.</p>"},{"location":"#inspiration","title":"\ud83d\udd17 Inspiration","text":"<p>This repository blends ideas from:</p> <ul> <li>Knowledge Gardens \u2014 living notes that evolve over time</li> <li>Awesome Lists \u2014 curated, organized collections of references</li> <li>Cookbooks \u2014 hands-on, practical examples ready to apply</li> </ul>"},{"location":"#license","title":"\u2699\ufe0f License","text":"<p>All content is released under the MIT License, unless otherwise specified by source authors or publications.</p>"},{"location":"#quick-navigation","title":"\ud83c\udf10 Quick Navigation","text":"<ul> <li><code>notes/</code> \u2013 raw ideas and notes</li> <li><code>guide/</code> \u2013 complete guide</li> <li><code>patterns/</code> \u2013 design patterns</li> <li><code>resources/</code> \u2013 external references</li> <li><code>snippets/</code> \u2013 code snippets</li> <li><code>examples/</code> \u2013 practical examples</li> </ul> <p>The goal is to maintain a living, collaborative repository where technical knowledge about AI agents can be cultivated, refined, and shared.</p>"},{"location":"notes/","title":"Notas","text":"<ul> <li>Mem\u00f3ria do agente sem eco: como evitar respostas duplicadas</li> <li>Livro: Agentic Design Patterns</li> </ul>"},{"location":"notes/2025-10-13_agent-memory-without-echo/","title":"Mem\u00f3ria do agente sem eco: como evitar respostas duplicadas","text":"","tags":["memory","agent","deduplication","idempotency","langgraph","redis","celery","duckdb","guardrails"]},{"location":"notes/2025-10-13_agent-memory-without-echo/#conteudo-bruto","title":"Conte\u00fado Bruto","text":"<p>\ud83e\udde0 Mem\u00f3ria do agente sem \u201ceco\u201d: como evitar respostas duplicadas</p> <p>Repeti\u00e7\u00e3o a cada turno costuma vir de 3 problemas: (1) reenvio do hist\u00f3rico bruto, (2) escrita concorrente da mem\u00f3ria, (3) aus\u00eancia de controles de idempot\u00eancia. Na Scoras Stack, resolvemos assim:</p> <ol> <li> <p>PydanticAI: mem\u00f3ria tipada e validada (epis\u00f3dica, resumo conversacional e vari\u00e1veis de sess\u00e3o). Nada de string solta.</p> </li> <li> <p>LangGraph: grafo de estados com MemorySaver() e checkpoints; s\u00f3 o essencial segue para o pr\u00f3ximo n\u00f3.</p> </li> <li> <p>Redis: armazenamento de sess\u00e3o e locks distribu\u00eddos (garantimos um \u00fanico write por turno via SET NX com TTL).</p> </li> <li> <p>DuckDB: contexto estruturado e barato para consultas; evita reprocessar documentos a cada intera\u00e7\u00e3o.</p> </li> <li> <p>Guardrails: dedupe de sa\u00edda (hash do conte\u00fado), filtros de repeti\u00e7\u00e3o e pol\u00edticas de estilo antes de responder.</p> </li> <li> <p>Celery: o maestro ass\u00edncrono.</p> </li> <li>Write-behind da mem\u00f3ria (resumo e embeddings) fora do request principal.</li> <li>Idempot\u00eancia por chave de turno (ex: session_id:turn_id) evitando jobs duplicados.</li> <li>Rate limit e retry com backoff para chamadas a LLMs e vetores.</li> <li>Debounce de eventos r\u00e1pidos (consolida m\u00faltiplas edi\u00e7\u00f5es do usu\u00e1rio em um \u00fanico resumo).</li> <li>Orquestra\u00e7\u00e3o com groups/chords para batch de ferramentas e atualiza\u00e7\u00e3o de mem\u00f3ria ao final.</li> <li>Outbox/Saga (opcional) para confirmar persist\u00eancia antes de \u201cpromover\u201d o estado do agente.</li> </ol> <p>\ud83d\udca1 Fluxo pr\u00e1tico: Usu\u00e1rio fala \u2192 LangGraph processa \u2192 resposta sai r\u00e1pido \u2192 Celery enfileira tarefas de \u201cmem\u00f3ria\u201d (resumo, indexa\u00e7\u00e3o, m\u00e9tricas) \u2192 Redis bloqueia writes concorrentes \u2192 DuckDB/\u00edndices s\u00e3o atualizados uma vez por turno \u2192 Guardrails checa duplica\u00e7\u00e3o antes de enviar a pr\u00f3xima sa\u00edda.</p> <p>Checklist anti-eco: - N\u00e3o reenviar todo o hist\u00f3rico; use resumo incremental. - Lock + idempotency key em qualquer escrita de mem\u00f3ria. - Deduplica\u00e7\u00e3o por hash no p\u00f3s-processamento. - Jobs Celery para tudo que n\u00e3o precisa estar no caminho s\u00edncrono.</p> <p>Resultado: conversa natural, sem repeti\u00e7\u00f5es, barata e est\u00e1vel!</p>","tags":["memory","agent","deduplication","idempotency","langgraph","redis","celery","duckdb","guardrails"]},{"location":"notes/2025-10-13_book-agentic-design-patterns/","title":"Livro: Agentic Design Patterns","text":"","tags":["book","agentic-patterns","design-patterns","google","reference"]},{"location":"notes/2025-10-13_book-agentic-design-patterns/#sumario-do-livro","title":"Sum\u00e1rio do Livro","text":"<p>Agentic Design Patterns: A Hands-On Guide to Building Intelligent Systems, Antonio Gulli</p> <p>Table of Contents - total 424 pages</p> <ul> <li>Dedication, 1 page</li> <li>Acknowledgment, 2 pages</li> <li>Foreword, 1 page</li> <li>A Thought Leader's Perspective: Power and Responsibility</li> <li>Introduction, 4 pages</li> <li>What makes an AI system an \"agent\"?, 9 pages</li> </ul> <p>Part One (Total: 103 pages) - Chapter 1: Prompt Chaining - Chapter 2: Routing - Chapter 3: Parallelization - Chapter 4: Reflection - Chapter 5: Tool Use - Chapter 6: Planning - Chapter 7: Multi-Agent</p> <p>Part Two (Total: 61 pages) - Chapter 8: Memory Management - Chapter 9: Learning and Adaptation - Chapter 10: Model Context Protocol (MCP) - Chapter 11: Goal Setting and Monitoring</p> <p>Part Three (Total: 34 pages) - Chapter 12: Exception Handling and Recovery - Chapter 13: Human-in-the-Loop - Chapter 14: Knowledge Retrieval (RAG)</p> <p>Part Four (Total: 114 pages) - Chapter 15: Inter-Agent Communication (A2A) - Chapter 16: Resource-Aware Optimization - Chapter 17: Reasoning Techniques - Chapter 18: Guardrails/Safety Patterns - Chapter 19: Evaluation and Monitoring - Chapter 20: Prioritization - Chapter 21: Exploration and Discovery</p> <p>Appendix (Total: 74 pages) - Appendix A: Advanced Prompting Techniques - Appendix B: AI Agentic \u2026.: From GUI to Real world environment - Appendix C: Quick overview of Agentic Frameworks - Appendix D: Building an Agent with AgentSpace (on-line only) - Appendix E: AI Agents on the CLI (online) - Appendix F: Under the Hood: An Inside Look at the Agents\u2019 Reasoning Engines - Appendix G: Coding agents</p> <ul> <li>Conclusion, 5 pages</li> <li>Glossary, 4 pages</li> <li>Index of Terms, 11 pages</li> </ul> <p>Links: - Pre Print: https://www.amazon.com/Agentic-Design-Patterns-Hands-Intelligent/dp/3032014018/</p>","tags":["book","agentic-patterns","design-patterns","google","reference"]},{"location":"patterns/","title":"Padr\u00f5es","text":"<ul> <li>Padr\u00e3o: Mem\u00f3ria de Agente Sem Eco</li> </ul>"},{"location":"patterns/agent-memory-without-echo/","title":"Padr\u00e3o: Mem\u00f3ria de Agente Sem Eco","text":"","tags":["memory","agent","deduplication","idempotency","langgraph","redis","celery","duckdb","guardrails"]},{"location":"patterns/agent-memory-without-echo/#problema","title":"Problema","text":"<p>Agentes de IA, especialmente em intera\u00e7\u00f5es cont\u00ednuas, tendem a gerar respostas repetitivas ou ficar presos em um \"eco\", onde o mesmo conte\u00fado \u00e9 reenviado a cada turno. Isso geralmente ocorre devido a tr\u00eas causas principais: 1.  Reenvio do Hist\u00f3rico Bruto: O hist\u00f3rico completo da conversa \u00e9 enviado ao LLM a cada nova intera\u00e7\u00e3o, causando redund\u00e2ncia. 2.  Escrita Concorrente na Mem\u00f3ria: M\u00faltiplos processos ou threads tentam atualizar o estado da mem\u00f3ria do agente simultaneamente, levando a condi\u00e7\u00f5es de corrida e estados inconsistentes. 3.  Aus\u00eancia de Controles de Idempot\u00eancia: A mesma opera\u00e7\u00e3o (como uma chamada de API ou atualiza\u00e7\u00e3o de mem\u00f3ria) \u00e9 executada v\u00e1rias vezes sem um mecanismo para garantir que o resultado seja o mesmo ap\u00f3s a primeira execu\u00e7\u00e3o.</p>","tags":["memory","agent","deduplication","idempotency","langgraph","redis","celery","duckdb","guardrails"]},{"location":"patterns/agent-memory-without-echo/#padrao","title":"Padr\u00e3o","text":"<p>Para resolver o problema do \"eco\", aplicamos uma arquitetura de sistema que separa o fluxo de resposta s\u00edncrono do gerenciamento de mem\u00f3ria ass\u00edncrono, utilizando um conjunto de ferramentas e t\u00e9cnicas para garantir a consist\u00eancia e a efici\u00eancia dos dados.</p> <p>O padr\u00e3o consiste nos seguintes componentes:</p> <ol> <li> <p>Mem\u00f3ria Tipada e Validada (PydanticAI): Em vez de usar strings soltas, a mem\u00f3ria do agente (epis\u00f3dica, resumo, vari\u00e1veis) \u00e9 estruturada com tipos definidos e valida\u00e7\u00f5es para garantir a integridade.</p> </li> <li> <p>Grafo de Estados (LangGraph): A l\u00f3gica da conversa \u00e9 modelada como um grafo de estados, onde cada n\u00f3 representa uma etapa do processamento. O <code>MemorySaver()</code> e os checkpoints garantem que apenas o estado essencial seja passado adiante, reduzindo a carga de informa\u00e7\u00e3o.</p> </li> <li> <p>Armazenamento de Sess\u00e3o com Locks (Redis): Um armazenamento r\u00e1pido como o Redis \u00e9 usado para gerenciar sess\u00f5es de usu\u00e1rio e implementar locks distribu\u00eddos (<code>SET NX</code> com TTL), garantindo que apenas uma opera\u00e7\u00e3o de escrita na mem\u00f3ria ocorra por turno de conversa.</p> </li> <li> <p>Contexto Estruturado (DuckDB): Documentos e dados de contexto s\u00e3o armazenados em um formato estruturado e de baixo custo, evitando o reprocessamento a cada intera\u00e7\u00e3o.</p> </li> <li> <p>Guardrails de Sa\u00edda: Antes de enviar a resposta final ao usu\u00e1rio, aplicam-se valida\u00e7\u00f5es como:</p> <ul> <li>Deduplica\u00e7\u00e3o por hash do conte\u00fado.</li> <li>Filtros para barrar repeti\u00e7\u00f5es \u00f3bvias.</li> <li>Pol\u00edticas de estilo e formata\u00e7\u00e3o.</li> </ul> </li> <li> <p>Orquestra\u00e7\u00e3o Ass\u00edncrona (Celery): Tarefas que n\u00e3o precisam estar no caminho cr\u00edtico da resposta s\u00e3o delegadas a um sistema de filas ass\u00edncrono:</p> <ul> <li>Write-behind: A atualiza\u00e7\u00e3o da mem\u00f3ria de longo prazo (resumos, embeddings) ocorre em background.</li> <li>Idempot\u00eancia: Chaves de idempot\u00eancia (ex: <code>session_id:turn_id</code>) previnem a execu\u00e7\u00e3o de jobs duplicados.</li> <li>Controle de Taxa e Retentativas: Gerenciamento de chamadas a servi\u00e7os externos (LLMs, bancos de vetores) com pol\u00edticas de <code>rate limit</code> e <code>retry</code>.</li> <li>Debounce: Agrupamento de eventos r\u00e1pidos (ex: m\u00faltiplas edi\u00e7\u00f5es do usu\u00e1rio) em uma \u00fanica tarefa de atualiza\u00e7\u00e3o.</li> </ul> </li> </ol>","tags":["memory","agent","deduplication","idempotency","langgraph","redis","celery","duckdb","guardrails"]},{"location":"patterns/agent-memory-without-echo/#exemplo-de-fluxo","title":"Exemplo de Fluxo","text":"<ol> <li>O usu\u00e1rio envia uma mensagem.</li> <li>O <code>LangGraph</code> processa a entrada e gera uma resposta r\u00e1pida.</li> <li>O <code>Celery</code> enfileira tarefas de atualiza\u00e7\u00e3o de mem\u00f3ria (resumo, indexa\u00e7\u00e3o).</li> <li>O <code>Redis</code> bloqueia escritas concorrentes para a sess\u00e3o atual.</li> <li>Os armazenamentos de dados (<code>DuckDB</code>, \u00edndices vetoriais) s\u00e3o atualizados de forma segura.</li> <li>Os <code>Guardrails</code> validam a pr\u00f3xima sa\u00edda para evitar duplica\u00e7\u00e3o.</li> </ol>","tags":["memory","agent","deduplication","idempotency","langgraph","redis","celery","duckdb","guardrails"]},{"location":"patterns/agent-memory-without-echo/#quando-usar","title":"Quando Usar","text":"<p>Este padr\u00e3o \u00e9 ideal para qualquer sistema de agente conversacional que precise manter o contexto por m\u00faltiplos turnos e onde a qualidade da intera\u00e7\u00e3o (fluidez, aus\u00eancia de repeti\u00e7\u00e3o) \u00e9 um requisito fundamental. \u00c9 especialmente \u00fatil em aplica\u00e7\u00f5es de alta concorr\u00eancia, onde m\u00faltiplos usu\u00e1rios interagem simultaneamente com os agentes.</p>","tags":["memory","agent","deduplication","idempotency","langgraph","redis","celery","duckdb","guardrails"]},{"location":"patterns/agent-memory-without-echo/#leituras","title":"Leituras","text":"<ul> <li>Post Original no LinkedIn por Anderson Amaral</li> </ul>","tags":["memory","agent","deduplication","idempotency","langgraph","redis","celery","duckdb","guardrails"]},{"location":"resources/links/","title":"Links","text":"<ul> <li>title: \"Livro: Agentic Design Patterns\"   author: \"Antonio Gulli\"   org: \"Google\"   url: \"https://docs.google.com/document/d/1rsaK53T3Lg5KoGwvf8ukOUvbELRtH-V0LnOIFDxBryE/edit?tab=t.0\"   insight: \"Um guia abrangente e pr\u00e1tico sobre padr\u00f5es de design para sistemas de IA agenticos, cobrindo desde a arquitetura fundamental at\u00e9 t\u00e9cnicas avan\u00e7adas de comunica\u00e7\u00e3o e otimiza\u00e7\u00e3o entre agentes.\"   tags: [\"book\", \"agentic-patterns\", \"design-patterns\", \"google\", \"reference\"]   from_note: \"/docs/notes/2025-10-13_book-agentic-design-patterns.md\"</li> </ul>"}]}